{"version":3,"sources":["ColorModeSwitcher.tsx","components/Header/Header.tsx","components/Footer/Footer.tsx","components/TableComponent/TableComponent.tsx","App.tsx","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","Header","bg","w","justify","bgColor","py","flexShrink","border","borderColor","borderBottomRadius","colorScheme","justifySelf","Footer","h","borderTopRadius","direction","align","TableComponent","response","sorted","sortHandler","borderRadius","width","gridGap","map","item","index","player","score","App","useState","JSON","parse","sessionStorage","getItem","setResponse","setSorted","sortedItems","sort","a","b","useEffect","sse","EventSource","onmessage","event","newPlayer","data","currentPlayers","setItem","stringify","onerror","console","warn","close","theme","minH","flexGrow","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.595b548c.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, 'aria-label'>\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  );\n};\n","import React from 'react';\nimport {\n  Flex,\n  Heading,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from '../../ColorModeSwitcher';\n\nconst Header = () => {\n  const bg = useColorModeValue('#9cd39f', '#37753a');\n\n  return (\n    <Flex\n      w=\"100%\"\n      justify=\"center\"\n      bgColor={bg}\n      py=\"10px\"\n      flexShrink={0}\n      border=\"1px solid\"\n      borderColor=\"grey\"\n      borderBottomRadius=\"10px\"\n    >\n      <Flex\n        w=\"70%\"\n        justify=\"space-between\"\n        py=\"30px\"\n      >\n        <Heading colorScheme=\"brand.100\">\n          Player&apos;s scores\n        </Heading>\n        <ColorModeSwitcher justifySelf=\"flex-end\" />\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport {\n  Flex,\n  Heading,\n  useColorModeValue,\n} from '@chakra-ui/react';\n\nconst Footer = () => {\n  const bg = useColorModeValue('#9cd39f', '#37753a');\n\n  // @ts-ignore\n  return (\n    <Flex\n      w=\"100%\"\n      justify=\"center\"\n      bgColor={bg}\n      h=\"120px\"\n      flexShrink={0}\n      border=\"1px solid\"\n      borderColor=\"grey\"\n      borderTopRadius=\"10px\"\n    >\n      <Flex\n        w=\"70%\"\n        direction=\"column\"\n        align=\"center\"\n        py=\"30px\"\n      >\n        <Heading colorScheme=\"brand.100\">\n          Player&apos;s scores\n        </Heading>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default Footer;\n","import React, { useEffect, useState } from 'react';\nimport {\n  Box,\n  Button,\n  Flex,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport {\n  FaUserAlt,\n  FaHashtag,\n  FaArrowUp,\n  FaArrowDown,\n} from 'react-icons/fa';\nimport { ResponseExample } from '../../types/ResponseExample';\n\ntype Props = {\n  response: ResponseExample[];\n  sorted: boolean,\n  sortHandler: () => void,\n}\n\nconst TableComponent: React.FC<Props> = ({\n  response,\n  sorted,\n  sortHandler,\n}) => {\n  const bg = useColorModeValue('#d8d8d8', '#938f8f');\n\n  return (\n    <Box borderRadius=\"10px\" border=\"1px solid grey\" bgColor={bg}>\n      <Table\n        size=\"lg\"\n        variant=\"striped\"\n        borderRadius=\"10px\"\n        width=\"500px\"\n      >\n        <Thead>\n          <Tr>\n            <Th>\n              <Flex gridGap=\"10px\" align=\"center\">\n                <FaUserAlt />\n                Player\n              </Flex>\n            </Th>\n            <Th>\n              <Flex gridGap=\"10px\" align=\"center\">\n                <FaHashtag />\n                Score\n                {sorted\n                  ? (\n                    <Button bgColor={bg} onClick={() => sortHandler()}>\n                      <FaArrowUp />\n                    </Button>\n                  )\n                  : (\n                    <Button bgColor={bg} onClick={() => sortHandler()}>\n                      <FaArrowDown />\n                    </Button>\n                  )}\n              </Flex>\n            </Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {response.map((item, index) => (\n            <Tr key={index}>\n              <Td>\n                {item.player}\n              </Td>\n              <Td>\n                {item.score}\n              </Td>\n            </Tr>\n          ))}\n        </Tbody>\n      </Table>\n    </Box>\n  );\n};\n\nexport default TableComponent;\n","import React, { useEffect, useState } from 'react';\nimport {\n  ChakraProvider,\n  theme,\n  Flex,\n} from '@chakra-ui/react';\nimport Header from './components/Header/Header';\nimport Footer from './components/Footer/Footer';\nimport TableComponent from './components/TableComponent/TableComponent';\nimport { ResponseExample } from './types/ResponseExample';\n\nconst App = () => {\n  const [response, setResponse] = useState<ResponseExample[]>(JSON.parse(sessionStorage.getItem('players') || '[]'));\n  const [sorted, setSorted] = useState<boolean>(JSON.parse(sessionStorage.getItem('orderSort') || 'true'));\n  const sortedItems = [...response.sort((a: ResponseExample, b: ResponseExample) => {\n    return sorted ? a.score - b.score : b.score - a.score;\n  })];\n\n  const sortHandler = () => {\n    setSorted(() => {\n      sessionStorage.setItem('orderSort', JSON.stringify(!sorted));\n      return !sorted;\n    });\n  };\n\n  useEffect(() => {\n    const sse = new EventSource('https://server-players-scores.herokuapp.com/');\n\n    sse.onmessage = function (event) {\n      const newPlayer = JSON.parse(event.data);\n      setResponse((currentPlayers) => {\n        sessionStorage.setItem('players', JSON.stringify([...currentPlayers, newPlayer]));\n        return [...currentPlayers, newPlayer];\n      });\n    };\n\n    sse.onerror = function () {\n      console.warn('An error occurred while getting the user');\n      sse.close();\n    };\n  }, []);\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Flex minH=\"100vh\" direction=\"column\">\n        <Header />\n        <Flex\n          flexGrow={1}\n          justify=\"center\"\n          align=\"center\"\n          py=\"50px\"\n        >\n          <TableComponent\n            response={sortedItems}\n            sorted={sorted}\n            sortHandler={sortHandler}\n          />\n        </Flex>\n        <Footer />\n      </Flex>\n    </ChakraProvider>\n  );\n};\n\nexport default App;\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}